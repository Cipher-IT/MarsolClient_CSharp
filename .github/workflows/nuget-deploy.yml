# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Publish Nuget Package

on:
  push:
    branches: [ "main" ]
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
defaults:
  run:
    shell: pwsh
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
    - run: dotnet restore ./Marsol.csproj
    - run: dotnet build ./Marsol.csproj --no-restore --configuration Release --output ${{ env.NuGetDirectory }}

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: ${{ env.NuGetDirectory }}/*.nupkg

  deploy:
      runs-on: ubuntu-latest
      needs: [ build ]
      steps:
        # Download the NuGet package created in the previous job
        - uses: actions/download-artifact@v4.1.7
          with:
            name: nuget
            path: ${{ env.NuGetDirectory }}

        # Install the .NET SDK indicated in the global.json file
        - name: Setup .NET Core
          uses: actions/setup-dotnet@v3

        # Publish all NuGet packages to NuGet.org
        # Use --skip-duplicate to prevent errors if a package with the same version already exists.
        # If you retry a failed workflow, already published packages will be skipped without error.
        - name: Publish NuGet package
          run: |
            foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
                dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
            }
  
